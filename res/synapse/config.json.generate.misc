#!/sbin/busybox sh

cat << CTAG
{
    name:MISC,
    elements:[
		`[ -d "/sys/module/lpm_levels/system" ] && PM=/sys/module/lpm_levels/system;
		
		if [ -d "$PM/cpu0" ]; then
			$BB echo '{ SPane:{
				title:"Low Power Mode (LPM) Settings"
			}},'
			if [ -f "$PM/cpu0/wfi/idle_enabled" ]; then
			C0=\`bool $PM/cpu0/wfi/idle_enabled\`;
				$BB echo '{ SCheckBox:{
					description:"Shallowest Sleep with instant wake up.",
					label:"C0 (WFI)",
					default:'$C0',
					action:"socset '$PM'/cpu0/wfi/idle_enabled wfi"
				}},'
			fi
			if [ -f "$PM/cpu0/retention/idle_enabled" ]; then
			C1=\`bool $PM/cpu0/retention/idle_enabled\`;
				$BB echo '{ SCheckBox:{
					description:"Slightly deeper sleep with slight latency when waking up. (Disable this if you encounter screen flickering)",
					label:"C1 (Retention)",
					default:'$C1',
					action:"socset '$PM'/cpu0/retention/idle_enabled retention"
				}},'
			fi
			if [ -f "$PM/cpu0/standalone_pc/idle_enabled" ]; then
			C2=\`bool $PM/cpu0/standalone_pc/idle_enabled\`;
				$BB echo '{ SCheckBox:{
					description:"Deeper sleep with longer latency when waking up.",
					label:"C2 (Stand Alone Power Collapse)",
					default:'$C2',
					action:"socset '$PM'/cpu0/standalone_pc/idle_enabled standalone_pc"
				}},'
			fi
			if [ -f "$PM/cpu0/pc/idle_enabled" ]; then
			C3=\`bool $PM/cpu0/pc/idle_enabled\`;
				$BB echo '{ SCheckBox:{
					description:"Really deep sleep with longest latency when waking up.",
					label:"C3 (Power Collapse)",
					default:'$C3',
					action:"socset '$PM'/cpu0/pc/idle_enabled pc"
				}},'
			fi
		fi`
		`if [ -f "/sys/module/state_notifier/parameters/enabled" ]; then
			SN=\`bool /sys/module/state_notifier/parameters/enabled\`
			$BB echo '{ SPane:{
			title:"State Notifier"
			}},
				{ SCheckBox:{
					label:"State Notifier Driver",
					description:"State Notifier Driver is used by multiple drivers to perform functions when device suspends and resumes from deep sleep and thereby contributes to system maintenance, optimization, performance and power saving. Disable this driver only if necessary.",
					default:'$SN',
					action:"boolean /sys/module/state_notifier/parameters/enabled"
				}},'
		fi`
		`if [ -f "/sys/kernel/fast_charge/force_fast_charge" ] && [ ! -f "/sys/kernel/fast_charge/fast_charge_level" ]; then
			FC=\`$BB cat /sys/kernel/fast_charge/force_fast_charge\`
			$BB echo '{ SPane:{
			title:"USB Fast Charge"
			}},
				{ SCheckBox:{
					label:"Enable",
					description:"If enabled, device will charge faster when connected through USB.",
					default:'$FC',
					action:"generic /sys/kernel/fast_charge/force_fast_charge"
				}},'
		fi`
		`if [ -f "sys/vibrator/pwmvalue" ]; then
		VIBRATOR=\`$BB cat /sys/vibrator/pwmvalue\`
			$BB echo '{ SPane:{
				title:"Vibrator Strength"
			}},
				{ SSeekBar:{
					description:"Allows to set the intensity of the vibrator.",
					step:1,
					min:0,
					max:127,
					default:'$VIBRATOR',
					action:"generic sys/vibrator/pwmvalue"
				}},'
		fi`
		`if [ -f "/sys/module/leds_qpnp/parameters/charging_led" ]; then
		CLED=\`$BB cat /sys/module/leds_qpnp/parameters/charging_led\`
			$BB echo '{ SPane:{
				title:"Charging LED"
			}},
				{ SCheckBox:{
					label:"Enable",
					description:"Allows to set always-on LED while charging device. LED color will depend on battery level. Unplug and then plug charger to see effect.",
					default:'$CLED',
					action:"generic /sys/module/leds_qpnp/parameters/charging_led",
				}},'
		fi`
		`if [ -d "/sys/class/leds" ]; then
			$BB echo '{ SPane:{
				title:"LED Control",
				description:"Kernel trigger for LEDs. Using this might interfere with OS level LED management and vice versa.",
			}},'
			if [ -f "/sys/class/leds/blue/trigger" ]; then
				$BB echo '{ SOptionList:{
					title:"Blue",
					default:none,
					action:"bracket-option /sys/class/leds/blue/trigger",
					values:['
						for LEDS in \`$BB cat /sys/class/leds/blue/trigger | $BB sed -e "s/\]//;s/\[//"\`; do
							$BB echo "\"$LEDS\",";
						done;
					$BB echo ']
				}},'
			fi
			if [ -f "/sys/class/leds/green/trigger" ]; then
				$BB echo '{ SOptionList:{
					title:"Green",
					default:none,
					action:"bracket-option /sys/class/leds/green/trigger",
					values:['
						for LEDS in \`$BB cat /sys/class/leds/green/trigger | $BB sed -e "s/\]//;s/\[//"\`; do
							$BB echo "\"$LEDS\",";
						done;
					$BB echo ']
				}},'
			fi
			if [ -f "/sys/class/leds/red/trigger" ]; then
				$BB echo '{ SOptionList:{
					title:"Red",
					default:none,
					action:"bracket-option /sys/class/leds/red/trigger",
					values:['
						for LEDS in \`$BB cat /sys/class/leds/red/trigger | $BB sed -e "s/\]//;s/\[//"\`; do
							$BB echo "\"$LEDS\",";
						done;
					$BB echo ']
				}},'
			fi
			if [ -f "/sys/class/leds/lcd-backlight/trigger" ]; then
				$BB echo '{ SOptionList:{
					title:"LCD Backlight",
					default:none,
					action:"bracket-option /sys/class/leds/lcd-backlight/trigger",
					values:['
						for LEDS in \`$BB cat /sys/class/leds/lcd-backlight/trigger | $BB sed -e "s/\]//;s/\[//"\`; do
							$BB echo "\"$LEDS\",";
						done;
					$BB echo ']
				}},'
			fi
			if [ -f "/sys/class/leds/spotlight/trigger" ]; then
				$BB echo '{ SOptionList:{
					title:"Spotlight",
					default:none,
					action:"bracket-option /sys/class/leds/spotlight/trigger",
					values:['
						for LEDS in \`$BB cat /sys/class/leds/spotlight/trigger | $BB sed -e "s/\]//;s/\[//"\`; do
							$BB echo "\"$LEDS\",";
						done;
					$BB echo ']
				}},'
			fi
		fi`
		`if [ -f "/sys/module/wakeup/parameters/enable_si_ws" ]; then
			WS=\`bool /sys/module/wakeup/parameters/enable_si_ws\`
			HWS=\`bool /sys/module/wakeup/parameters/enable_msm_hsic_ws\`
			SWS=\`bool /sys/module/smb135x_charger/parameters/use_wlock\`
			BWS=\`bool /sys/module/wakeup/parameters/enable_bluesleep_ws\`
			WRS=\`bool /sys/module/wakeup/parameters/enable_wlan_rx_wake_ws\`
			WCS=\`bool /sys/module/wakeup/parameters/enable_wlan_ctrl_wake_ws\`
			WWS=\`bool /sys/module/wakeup/parameters/enable_wlan_wake_ws\`
				$BB echo '{ SPane:{
					title:"Wakeup Sources",
					description:"Disable wakeup sources to reduce wake locks. Leave them to default values if unsure.",
				}},
					{ SCheckBox:{
						label:"Enable sensor_ind wakeup source",
						default:'$WS',
						action:"boolean /sys/module/wakeup/parameters/enable_si_ws"
					}},
					{ SCheckBox:{
						label:"Enable msm_hsic_host wakeup source",
						default:'$HWS',
						action:"boolean /sys/module/wakeup/parameters/enable_msm_hsic_ws"
					}},
					{ SCheckBox:{
						label:"Enable smb135x_charger wakeup source",
						default:'$SWS',
						action:"boolean /sys/module/smb135x_charger/parameters/use_wlock"
					}},
					{ SCheckBox:{
						label:"Enable bluesleep wakeup source",
						default:'$BWS',
						action:"boolean /sys/module/wakeup/parameters/enable_bluesleep_ws"
					}},
					{ SCheckBox:{
						label:"Enable wlan_rx_wake wakeup source",
						default:'$WRS',
						action:"boolean /sys/module/wakeup/parameters/enable_wlan_rx_wake_ws"
					}},
					{ SCheckBox:{
						label:"Enable wlan_ctrl_wake wakeup source",
						default:'$WCS',
						action:"boolean /sys/module/wakeup/parameters/enable_wlan_ctrl_wake_ws"
					}},
					{ SCheckBox:{
						label:"Enable wlan_wake wakeup source",
						default:'$WWS',
						action:"boolean /sys/module/wakeup/parameters/enable_wlan_wake_ws"
					}},'
		fi`
		`if [ -f "/sys/kernel/sched/gentle_fair_sleepers" ]; then
			GFS=\`$BB cat /sys/kernel/sched/gentle_fair_sleepers\`
				$BB echo '{ SPane:{
					title:"Gentle Fair Sleepers"
				}},
				{ SCheckBox:{
						label:"Enable",
						description:"Sleeper Fairness is a concept used by CFS which treat sleeping/waiting tasks as if they were in a run queue. This implies tasks which spend most of the time waiting for an user input and such will get a fair share of CPU when they need it. Disabling Gentle Fair Sleepers could improve UI responsiveness.",
						default:'$GFS',
						action:"generic /sys/kernel/sched/gentle_fair_sleepers"
					}},'
		fi`
		`if [ -f "/sys/kernel/sched/arch_power_0" ]; then
			APOWER=\`$BB cat /sys/kernel/sched/arch_power\`
				$BB echo '{ SPane:{
					title:"Arch Power"
				}},
					{ SCheckBox:{
						label:"Enable",
						description:"Arch Power uses arch dependent power functions to be used instead of generic high resolution timer ticks and double ticks to reflect the relative capacity of each core.",
						default:'$APOWER',
						action:"generic /sys/kernel/sched/arch_power"
					}},'
		fi`
    ]
}
CTAG
