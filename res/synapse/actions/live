BB=/sbin/busybox;
DEVICE=/res/synapse/files/shamu.sh;



read() {
	T=/sys/kernel/msm_limiter/$1;
	VALUE=-1;
	NOW=`$BB cat $T`;
	for LIM in $NOW; do
		VALUE=$(($VALUE+1));
		if [ "$VALUE" -eq $2 ]; then
			$BB echo ${LIM:2};
			return
		fi;
	done;
}

case $1 in
	CHECKCRON)
		CRON_SERVICE=$(pidof crond | wc -l);
		if [ "$CRON_SERVICE" -eq "1" ]; then
			echo "Cron Service is Running";
		else
			echo "Cron Service is Offline";
		fi;
	;;
	KSMStats)
		KSM="$(expr `cat /sys/kernel/mm/ksm/run`)"
		if [ KSM -eq "1" ]; then
			SAVEDMEM=`echo "Saved memory: $((\`cat /sys/kernel/mm/ksm/pages_sharing\`*4096/1024/1024)) MB"`
			SHARDMEM=`echo "Shared memory: $((\`cat /sys/kernel/mm/ksm/pages_shared\`*4096/1024/1024)) MB"`
			echo $SAVEDMEM@n$SHARDMEM
		else
			echo KSM is Disabled.
		fi
	;;
	PVSbin)
		$BB echo `sh $DEVICE DebugPVS`;
	;;
	BatteryTemperature)
		$BB echo `sh $DEVICE LiveBatteryTemperature`;
	;;
	Bootloader)
		$BB echo `sh $DEVICE LiveBootloader`;
	;;
	CORESTATUS)
		CORE_0="$(($(read live_cur_freq 0)/1000))MHz"
		CORE_1="$(($(read live_cur_freq 1)/1000))MHz"
		CORE_2="$(($(read live_cur_freq 2)/1000))MHz"
		CORE_3="$(($(read live_cur_freq 3)/1000))MHz"
		if [ $CORE_1 == "0MHz" ]; then
			CORE_1=Offline
		fi
		if [ $CORE_2 == "0MHz" ]; then
			CORE_2=Offline
		fi
		if [ $CORE_3 == "0MHz" ]; then
			CORE_3=Offline
		fi
		echo CPU0: $CORE_0@nCPU1: $CORE_1@nCPU2: $CORE_2@nCPU3: $CORE_3
	;;
	CPUBWFrequency)
		$BB echo `sh $DEVICE LiveCPUBWFrequency`;
	;;
	CPUFrequency)
		$BB echo `sh $DEVICE LiveCPUFrequency`;
	;;
	CPUTemperature)
		$BB echo `sh $DEVICE LiveCPUTemperature`;
	;;
	GPUFrequency)
		$BB echo `sh $DEVICE LiveGPUFrequency`;
	;;
	Memory)
		$BB echo `sh $DEVICE LiveMemory`;
	;;
	RAMStats)
		PROCESS_REC="$(expr `cat /sys/module/process_reclaim/parameters/enable_process_reclaim`)"
		if [ $PROCESS_REC -eq "1" ]; then
			pressure_max=`echo "Max Pressure: \`cat /sys/module/process_reclaim/parameters/pressure_max\`"`
			pressure_min=`echo "Min Pressure: \`cat /sys/module/process_reclaim/parameters/pressure_min\`"`
			pressure=`echo "Current Pressure: \`cat /sys/module/process_reclaim/parameters/pressure\`"`
			reclaim_avg_efficiency=`echo "Avg Efficiency: \`cat /sys/module/process_reclaim/parameters/reclaim_avg_efficiency\`%"`
		fi

		ADAPTIVE_LMK="$(expr `cat /sys/module/lowmemorykiller/parameters/enable_adaptive_lmk`)"
		if [ $ADAPTIVE_LMK -eq "1" ]; then
			vm_pressure_adaptive_start=`echo "Start Point: \`cat /sys/module/lowmemorykiller/parameters/vm_pressure_adaptive_start\`"`
			vmpressure_file_min=`echo "Min Free RAM Point: $((\`cat /sys/module/lowmemorykiller/parameters/vmpressure_file_min\`*4/1024)) MB"`

		fi

		if [ $PROCESS_REC -eq "1" ] && [ $ADAPTIVE_LMK -eq "1" ]; then
			echo Process Reclaim@n$pressure_min@n$pressure_max@n$pressure@n$reclaim_avg_efficiency@n@nAdaptive LMK@n$vm_pressure_adaptive_start@n$vmpressure_file_min
		elif [ $PROCESS_REC -eq "1" ] && [ $ADAPTIVE_LMK -eq "0" ]; then
			echo Process Reclaim@n$pressure_min@n$pressure_max@n$pressure@n$reclaim_avg_efficiency@n@nAdaptive LMK is Disabled
		elif [ $PROCESS_REC -eq "0" ] && [ $ADAPTIVE_LMK -eq "1" ]; then
			echo Adaptive LMK@n$vm_pressure_adaptive_start@n$vmpressure_file_min@n@nProcess Reclaim is Disabled
		else
			echo Process Reclaim is Disabled@nAdaptive LMK is Disabled
		fi
	;;
	SCALINGFREQ)
		FREQMAX_0="$(($(read live_max_freq 0)/1000))MHz"
		FREQMIN_0="$(($(read live_min_freq 0)/1000))MHz"
		FREQMAX_1="$(($(read live_max_freq 1)/1000))MHz"
		FREQMIN_1="$(($(read live_min_freq 1)/1000))MHz"
		FREQMAX_2="$(($(read live_max_freq 2)/1000))MHz"
		FREQMIN_2="$(($(read live_min_freq 2)/1000))MHz"
		FREQMAX_3="$(($(read live_max_freq 3)/1000))MHz"
		FREQMIN_3="$(($(read live_min_freq 3)/1000))MHz"
		echo CPU0 - $FREQMAX_0 : $FREQMIN_0@nCPU1 - $FREQMAX_1 : $FREQMIN_1@nCPU2 - $FREQMAX_2 : $FREQMIN_2@nCPU3 - $FREQMAX_3 : $FREQMIN_3
	;;
	Time)
		$BB echo `sh $DEVICE LiveTime $2 $3`;
	;;
	UpTime)
		$BB echo `sh $DEVICE LiveUpTime`;
	;;
	UnUsed)
		$BB echo `sh $DEVICE LiveUnUsed`;
	;;
	WakelocksKernel)
		$BB echo `sh $DEVICE LiveWakelocksKernel`;
	;;
	ZRAMStats)
		ZRAM="$(expr `cat /sys/devices/virtual/block/zram0/initstate`)"
		if [ $ZRAM -eq "1" ]; then
			compr_data_size_tmp=`echo "$((\`cat /sys/block/zram0/compr_data_size\`/1024))"`
			mem_used_total_tmp=`echo "$((\`cat /sys/block/zram0/mem_used_total\`/1024))"`
			orig_data_size_tmp=`echo "$((\`cat /sys/block/zram0/orig_data_size\`/1024))"`
			zero_pages_tmp=`echo "$((\`cat /sys/block/zram0/zero_pages\`*4))"`
			disksize_tmp=`echo "$((\`cat /sys/block/zram0/disksize\`/1024))"`
			SwapCached_tmp=`echo "\`cat /proc/meminfo | grep SwapCached | cut -d " " -f9\`"`

			notify_free=`echo "Notify free: \`cat /sys/block/zram0/notify_free\`"`
			num_reads=`echo "Num reads: \`cat /sys/block/zram0/num_reads\`"`
			num_writes=`echo "Num writes: \`cat /sys/block/zram0/num_writes\`"`

			saved_tmp=`echo "$((\`echo orig_data_size_tmp\`+\`echo zero_pages_tmp\`-\`echo mem_used_total_tmp\`-\`echo SwapCached_tmp\`))"`
			saved=`echo "Memory saved: $((\`echo saved_tmp\`/1024))MB"`
			Compression=`echo "Compression: $((\`echo compr_data_size_tmp\`*100/\`echo orig_data_size_tmp\`))%"`
			Compression_with_overhead=`echo "Compression with overhead: $((\`echo mem_used_total_tmp\`*100/\`echo orig_data_size_tmp\`))%"`
			Used_stage1=`echo "$((\`echo orig_data_size_tmp\`+\`echo zero_pages_tmp\`))"`
			Used_stage2=`echo "$((\`echo Used_stage1\`*100))"`
			Used=`echo "Used ZRAM $((\`echo Used_stage2\`/\`echo disksize_tmp\`))%"`

			compr_data_size=`echo "Compression data size: $((\`cat /sys/block/zram0/compr_data_size\`/1024/1024))MB"`
			mem_used_total=`echo "Mem used total: $((\`cat /sys/block/zram0/mem_used_total\`/1024/1024))MB"`
			orig_data_size=`echo "Original data size: $((\`cat /sys/block/zram0/orig_data_size\`/1024/1024))MB"`
			zero_pages=`echo "Zero pages: $((\`cat /sys/block/zram0/zero_pages\`*4))KiB"`
			disksize=`echo "Zram Disksize: $((\`cat /sys/block/zram0/disksize\`/1024/1024))MB"`
			SwapCached=`echo "SwapCached: $((\`echo SwapCached_tmp\`/1024))MB"`

			reclaim_avg_efficiency=`echo "Process Reclaim Avg Efficiency: \`cat /sys/module/process_reclaim/parameters/reclaim_avg_efficiency\`%"`

			echo $compr_data_size@n$mem_used_total@n$orig_data_size@n$zero_pages@n$disksize@n@n$notify_free@n$num_reads@n$num_writes@n@n$SwapCached@n$saved@n$Compression@n$Compression_with_overhead@n$Used@n$reclaim_avg_efficiency

		else
			echo ZRAM is Disabled.
		fi
	;;
esac
